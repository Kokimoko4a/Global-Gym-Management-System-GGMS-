@using GGMS.Web.Infrastructure.Extensions
@using GGMS.Web.ViewModels.Trainer
@using System.Security.Claims
@model TrainerBigViewModel

@{
    ViewData["Title"] = "Trainer page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <title>@ViewData["Title"]</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f9f9f9;
            margin: 0;
            padding: 20px;
        }

        .container {
            margin: 0 auto;
            padding: 20px;
        }

        h2 {
            text-align: center;
            color: #FFA500;
            margin-bottom: 20px;
        }

        .card {
            background-color: #000;
            color: #FFA500;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

            .card label {
                font-weight: bold;
                margin-bottom: 5px;
                display: block;
            }

            .card span {
                display: block;
            }

        .button-container {
            text-align: center;
            margin-top: 20px;
        }

            .button-container button {
                background-color: #FFA500;
                color: #000;
                padding: 10px 20px;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font-size: 16px;
            }

                .button-container button:hover {
                    background-color: #cc8400;
                }

        .comments-section {
            margin-top: 40px;
        }

        .comment {
            background-color: #fff;
            color: #000;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

            .comment label {
                font-weight: bold;
                margin-bottom: 5px;
                display: block;
            }

            .comment span {
                display: block;
            }

        .comment-form {
            margin-top: 20px;
        }

            .comment-form textarea {
                width: 100%;
                padding: 10px;
                border-radius: 8px;
                border: 1px solid #ccc;
                resize: none;
            }

            .comment-form button {
                background-color: #FFA500;
                color: #000;
                padding: 10px 20px;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font-size: 16px;
                margin-top: 10px;
            }

                .comment-form button:hover {
                    background-color: #cc8400;
                }
    </style>
</head>
<body>
    <div class="container">
        <h2>@ViewData["Title"]</h2>
        <div class="card">
            <label>First Name:</label>
            <span>@Model.FirstName</span>
        </div>
        <div class="card">
            <label>Last Name:</label>
            <span>@Model.LastName</span>
        </div>
        <div class="card">
            <label>Biography:</label>
            <span>@Model.Biography</span>
        </div>
        <div class="card">
            <label>Age:</label>
            <span>@Model.Age</span>
        </div>
        <div class="card">
            <label>Telephone Number:</label>
            <span>@Model.TelephoneNumber</span>
        </div>
        <div class="card">
            <label>Address:</label>
            <span>@Model.Address</span>
        </div>
        <div class="button-container">
            <form asp-action="RequestBecomingClient" asp-controller="Trainer" asp-route-id="@Model.Id" method="get">
                <button id="btn">Become Client</button>
            </form>
        </div>

        <div class="comments-section">
            <h3>Comments</h3>
            <div id="comments-list">
                @if (Model.Comments != null && Model.Comments.Any())
                {
                    foreach (var comment in Model.Comments.OrderByDescending(x => x.CreatedOn))
                    {
                        <div class="comment">
                            <label>@comment.Author.FirstName</label>
                            <span>@comment.Text</span>
                        </div>
                    }
                }
                else
                {
                    <p>No comments yet. Be the first to comment!</p>
                }
            </div>

            <div class="comment-form">
                <textarea id="commentContent" name="content" rows="4" placeholder="Add a comment..."></textarea>
                <input type="hidden" name="trainerId" value="@Model.Id" />
                <button id="AddComment">Add Comment</button>
            </div>
        </div>
    </div>
</body>

<script>
    document.getElementById("AddComment").addEventListener("click", async (event) => {
        event.preventDefault();

        const content = document.getElementById("commentContent").value;
        const trainerId = '@Model.Id';

        try {
            const response = await fetch("https://localhost:7113/Comment/AddComment", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    TrainerId: trainerId,
                    Content: content
                })
            });

            if (!response.ok) {
                throw new Error('Failed to add comment');
            }

            const comments = await response.json();

            // Clear the comment input field
            document.getElementById("commentContent").value = '';

            // Update the comments list
            const commentsList = document.getElementById("comments-list");
            commentsList.innerHTML = ''; // Clear existing comments

            if (comments && Array.isArray(comments) && comments.length > 0) {
                comments.forEach(comment => {
                    const commentDiv = document.createElement("div");
                    commentDiv.classList.add("comment");
                    // Ensure comment.Author is defined before accessing properties
                    if (comment.author && comment.author.firstName && comment.author.lastName) {
                        commentDiv.innerHTML = `<label>${comment.author.firstName} ${comment.author.lastName}</label><span>${comment.text}</span>`;
                    } else {
                        console.error('Author information missing in comment:', comment);
                        commentDiv.innerHTML = `<label>Unknown Author</label><span>${comment.text}</span>`;
                    }
                    commentsList.appendChild(commentDiv);
                });
            } else {
                commentsList.innerHTML = '<p>No comments yet. Be the first to comment!</p>';
            }
        } catch (error) {
            console.error("Failed to add comment", error);
        }
    });
</script>

</html>
