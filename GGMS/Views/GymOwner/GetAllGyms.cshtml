@using GGMS.Web.ViewModels.GymOwner;
@model GymQueryModel

<!-- Add custom styling for gym items and layout -->
<style>
    .gym-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: space-between;
    }

    .gym-item {
        flex: 1 1 calc(33.33% - 20px);
        max-width: calc(33.33% - 20px);
        box-sizing: border-box;
        border: 1px solid #ccc;
        padding: 10px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        text-align: center;
    }

    .gym-photo-container img {
        width: 250px;
        height: 200px;
        object-fit: cover;
        border-radius: 8px;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-secondary {
        background-color: #28a745;
        border: none;
        color: white;
        padding: 10px 20px;
        margin-top: 10px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn-secondary:hover {
        background-color: #218838;
    }

    .pagination {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        gap: 10px;
    }

    .pagination a {
        padding: 10px 15px;
        background-color: #007bff;
        color: white;
        text-decoration: none;
        border-radius: 5px;
    }

    .pagination a.active {
        background-color: #0056b3;
    }

    .pagination a.disabled {
        pointer-events: none;
        background-color: #ccc;
    }

    .search-bar {
        margin-bottom: 20px;
    }

    .search-bar input {
        padding: 10px;
        width: 300px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-right: 10px;
    }

    @@media (max-width: 1000px) {
        .gym-item {
            flex: 1 1 calc(50% - 20px);
            max-width: calc(50% - 20px);
        }
    }

    @@media (max-width: 600px) {
        .gym-item {
            flex: 1 1 100%;
            max-width: 100%;
        }
    }
</style>

<h2>List of Gyms</h2>

<!-- Search Form -->
<div class="search-bar">
    <form method="get" asp-controller="GymOwner" asp-action="GetAllGyms">
        <input type="text" name="KeyWords" value="@Model.KeyWords" placeholder="Search gyms..." />
        <input type="hidden" name="CurrentPage" value="1" />
        <button type="submit" class="btn btn-primary">Search</button>
    </form>
</div>

<div class="gym-container">
    @foreach (var gym in Model.GymSmallViewModels)
    {
        <div class="gym-item">
            <h3>@gym.Name</h3>
            <p>@gym.Addrress</p>

            <!-- Image container with initial photo -->
            <div class="gym-photo-container">
                <img id="photo-@gym.Name" src="@GetFirstPhoto(gym.PhotosPaths)" alt="Gym Photo" />
            </div>

            <!-- Button to switch the photo -->
            <button type="button" class="btn btn-primary" onclick="switchPhoto('@gym.Name', '@gym.PhotosPaths')">Switch Photo</button>

            <!-- View Button using Tag Helpers -->
            <a asp-controller="GymOwner" asp-action="Details" asp-route-id="@gym.Id" class="btn btn-secondary">View</a>
        </div>
    }
</div>

<!-- Pagination Section -->
<div class="pagination">
    <!-- Previous Button -->
    <a class="@(Model.CurrentPage == 1 ? "disabled" : string.Empty)"
       asp-controller="GymOwner"
       asp-action="GetAllGyms"
       asp-route-CurrentPage="@(Model.CurrentPage - 1)"
       asp-route-SearchTerm="@Model.KeyWords">
        Previous
    </a>

    <!-- Page Numbers -->
    @for (var i = 1; i <= Math.Ceiling((double)Model.TotalGyms / Model.GymsPerPage); i++)
    {
        <a class="@(Model.CurrentPage == i ? "active" : string.Empty)"
           asp-controller="GymOwner"
           asp-action="GetAllGyms"
           asp-route-CurrentPage="@i"
           asp-route-SearchTerm="@Model.KeyWords">
            @i
        </a>
    }

    <!-- Next Button -->
    <a class="@(Model.CurrentPage == Math.Ceiling((double)Model.TotalGyms / Model.GymsPerPage) ? "disabled" : string.Empty)"
       asp-controller="GymOwner"
       asp-action="GetAllGyms"
       asp-route-CurrentPage="@(Model.CurrentPage + 1)"
       asp-route-SearchTerm="@Model.KeyWords">
        Next
    </a>
</div>

@if (!Model.GymSmallViewModels.Any())
{
    <h2>No gyms found with the current filter.</h2>
}

@section Scripts {
    <script>
        function switchPhoto(gymName, photosPaths) {
            let photos = photosPaths.split(',').map(photo => photo.trim()).filter(photo => photo.length > 0);
            let photoElement = document.getElementById('photo-' + gymName);
            let currentPhotoSrc = photoElement.src;
            let currentIndex = photos.findIndex(photo => currentPhotoSrc.includes(photo));
            let nextIndex = (currentIndex + 1) % photos.length;
            photoElement.src = '/images/' + photos[nextIndex];
        }
    </script>
}

@functions {
    // Helper function to get the first photo for display with hardcoded /images/ directory
    private string GetFirstPhoto(string photosPaths)
    {
        var photos = photosPaths.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        return photos.Length > 0 ? Url.Content($"~/images/{photos[0].Trim()}") : string.Empty;
    }
}
